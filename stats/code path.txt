two attempts at efficiently finding next start:

/*
 // unused
 nextTokenIfElse: function(c, expressionStart, pos) {
 // 58% of tokens is caught here
 // http://qfox.nl/weblog/301

 if (c < ORD_DOT_2E) {
 if (c === ORD_SPACE_20) return this.parseOneChar(WHITE);
 if (c < ORD_OPEN_PAREN_28) {
 if (c === ORD_CR_0D) return this.parseCR();
 if (c === ORD_TAB_09) return this.parseOneChar(WHITE);
 if (c === ORD_DQUOTE_22) return this.parseDoubleString();
 if (c === ORD_EXCL_21) return this.parseEqualSigns();
 if (c === ORD_AND_26) return this.parseSameOrCompound(c);
 if (c === ORD_SQUOTE_27) return this.parseSingleString();
 if (c === ORD_$_24) return this.parseIdentifier();
 if (c === ORD_PERCENT_25) return this.parseCompoundAssignment();
 if (c === ORD_LF_0A) return this.parseNewline();
 if (c === ORD_VTAB_0B) return this.parseOneChar(WHITE);
 if (c === ORD_FF_0C) return this.parseOneChar(WHITE);
 } else if (c <= ORD_CLOSE_PAREN_29) {
 return this.parseOneChar(PUNCTUATOR);
 } else {
 if (c === ORD_COMMA_2C) return this.parseOneChar(PUNCTUATOR);
 if (c === ORD_STAR_2A) return this.parseCompoundAssignment();
 // + -
 return this.parseSameOrCompound(c);
 }
 } else {
 if (c < ORD_L_A_61) {
 if (c <= ORD_L_9_39) {
 if (c === ORD_DOT_2E) return this.parseLeadingDot();
 if (c >= ORD_L_1_31) return this.parseDecimalNumber();
 if (c === ORD_L_0_30) return this.parseLeadingZero();
 if (c === ORD_FWDSLASH_2F) return this.parseFwdSlash(expressionStart);
 } else if (c <= ORD_SEMI_3B) {
 // : or ;
 return this.parseOneChar(PUNCTUATOR);
 } else {
 if (c < ORD_L_A_UC_41) {
 if (c === ORD_IS_3D) return this.parseEqualSigns();
 if (c === ORD_QMARK_3F) return this.parseOneChar(PUNCTUATOR);
 if (c <= ORD_GT_3E) return this.parseLtgtPunctuator(c);
 } else if (c <= ORD_L_Z_UC_5A) {
 return this.parseIdentifier();
 } else {
 if (c === ORD_CLOSE_SQUARE_5D) return this.parseOneChar(PUNCTUATOR);
 if (c === ORD_OPEN_SQUARE_5B) return this.parseOneChar(PUNCTUATOR);
 if (c === ORD_LODASH_5F) return this.parseIdentifier();
 if (c === ORD_XOR_5E) return this.parseCompoundAssignment();
 if (c === ORD_BACKSLASH_5C) return this.parseBackslash();
 }
 }
 } else if (c <= ORD_L_Z_7A) {
 return this.parseIdentifier();
 } else {

 // TOFIX: check:
 // { = 123, |=124, }=125, ~=126. 124^1=125, 125^1=124. so if c^1<125 then c={ or c=} (because c>Zz=123)
 // ORD_CURLY_OPEN ORD_CURLY_CLOSE
 //          if (((c ^ 1) <= 124)) return this.parseOneChar(PUNCTUATOR);

 if (c === ORD_OPEN_CURLY_7B) return this.parseOneChar(PUNCTUATOR);
 if (c === ORD_CLOSE_CURLY_7D) return this.parseOneChar(PUNCTUATOR);
 if (c === ORD_OR_7C) return this.parseSameOrCompound(c);

 // TOFIX: check:          if ((c ^ ORD_PS) <= 1) return this.parseNewline(); // -> c === ORD_PS || c === ORD_LS
 if (c === ORD_LS_2029) return this.parseNewline();
 if (c === ORD_PS_2028) return this.parseNewline();
 if (c === ORD_NBSP_A0) return this.parseOneChar(WHITE);
 if (c === ORD_BOM_FEFF) return this.parseOneChar(WHITE);
 if (c === ORD_TILDE_7E) return this.parseCompoundAssignment();
 }
 }


 // TOFIX: still have to validate this first char as a valid ident start
 // throw 'fixme ['+c+']';
 // return this.parseIdentifier();
 throw 'Unexpected input [' + c + ']';
 },
 // unused
 nextTokenSwitch: function(c, expressionStart) {
 switch (c) {
 case ORD_SPACE_20:
 return this.parseOneChar(WHITE);
 case ORD_DOT_2E:
 return this.parseLeadingDot();
 case ORD_CR_0D:
 return this.parseCR();
 case ORD_LF_0A:
 return this.parseNewline();
 case ORD_OPEN_PAREN_28:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_CLOSE_PAREN_29:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_SEMI_3B:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_COMMA_2C:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_IS_3D:
 return this.parseEqualSigns();
 case ORD_L_T_74:
 return this.parseIdentifier();
 case ORD_OPEN_CURLY_7B:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_CLOSE_CURLY_7D:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_TAB_09:
 return this.parseOneChar(WHITE);
 case ORD_L_I_69:
 return this.parseIdentifier();
 case ORD_L_F_66:
 return this.parseIdentifier();
 case ORD_L_A_61:
 return this.parseIdentifier();
 case ORD_L_C_63:
 return this.parseIdentifier();
 case ORD_DQUOTE_22:
 return this.parseDoubleString();
 case ORD_L_R_72:
 return this.parseIdentifier();
 case ORD_L_V_76:
 return this.parseIdentifier();
 case ORD_OPEN_SQUARE_5B:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_CLOSE_SQUARE_5D:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_COLON_3A:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_L_B_62:
 return this.parseIdentifier();
 case ORD_L_E_65:
 return this.parseIdentifier();
 case ORD_L_S_73:
 return this.parseIdentifier();
 case ORD_L_N_6E:
 return this.parseIdentifier();
 case ORD_L_P_70:
 return this.parseIdentifier();
 case ORD_L_D_64:
 return this.parseIdentifier();
 case ORD_LODASH_5F:
 return this.parseIdentifier();
 case ORD_L_M_6D:
 return this.parseIdentifier();
 case ORD_L_G_67:
 return this.parseIdentifier();
 case ORD_PLUS_2B:
 return this.parseSameOrCompound(c);
 case ORD_L_0_30:
 return this.parseLeadingZero();
 case ORD_L_L_6C:
 return this.parseIdentifier();
 case ORD_L_O_6F:
 return this.parseIdentifier();
 case ORD_L_1_31:
 return this.parseDecimalNumber();
 case ORD_FWDSLASH_2F:
 return this.parseFwdSlash(expressionStart);
 case ORD_L_H_68:
 return this.parseIdentifier();
 case ORD_EXCL_21:
 return this.parseEqualSigns();
 case ORD_L_U_75:
 return this.parseIdentifier();
 case ORD_L_Z_UC_5A:
 return this.parseIdentifier();
 case ORD_L_E_UC_45:
 return this.parseIdentifier();
 case ORD_AND_26:
 return this.parseSameOrCompound(c);
 case ORD_L_W_77:
 return this.parseIdentifier();
 case ORD_L_D_UC_44:
 return this.parseIdentifier();
 case ORD_OR_7C:
 return this.parseSameOrCompound(c);
 case ORD_DASH_2D:
 return this.parseSameOrCompound(c);
 case ORD_L_X_78:
 return this.parseIdentifier();
 case ORD_SQUOTE_27:
 return this.parseSingleString();
 case ORD_L_A_UC_41:
 return this.parseIdentifier();
 case ORD_L_Y_79:
 return this.parseIdentifier();
 case ORD_STAR_2A:
 return this.parseCompoundAssignment();
 case ORD_L_T_UC_54:
 return this.parseIdentifier();
 case ORD_L_F_UC_46:
 return this.parseIdentifier();
 case ORD_L_K_6B:
 return this.parseIdentifier();
 case ORD_L_C_UC_43:
 return this.parseIdentifier();
 case ORD_L_J_6A:
 return this.parseIdentifier();
 case ORD_L_S_UC_53:
 return this.parseIdentifier();
 case ORD_L_M_UC_4D:
 return this.parseIdentifier();
 case ORD_L_P_UC_50:
 return this.parseIdentifier();
 case ORD_QMARK_3F:
 return this.parseOneChar(PUNCTUATOR);
 case ORD_LT_3C:
 return this.parseLtgtPunctuator(c);
 case ORD_L_2_33:
 return this.parseDecimalNumber();
 case ORD_L_G_UC_47:
 return this.parseIdentifier();
 case ORD_$_24:
 return this.parseIdentifier();
 case ORD_L_B_UC_42:
 return this.parseIdentifier();
 case ORD_L_H_UC_48:
 return this.parseIdentifier();
 case ORD_L_I_UC_49:
 return this.parseIdentifier();
 case ORD_L_O_UC_4F:
 return this.parseIdentifier();
 case ORD_L_Q_71:
 return this.parseIdentifier();
 case ORD_L_R_UC_52:
 return this.parseIdentifier();
 case ORD_L_Z_7A:
 return this.parseIdentifier();
 case ORD_GT_3E:
 return this.parseLtgtPunctuator(c);
 case ORD_L_3_34:
 return this.parseDecimalNumber();
 case ORD_L_N_UC_4E:
 return this.parseIdentifier();
 case ORD_L_L_UC_4C:
 return this.parseIdentifier();
 case ORD_L_Y_UC_59:
 return this.parseIdentifier();
 case ORD_L_J_UC_4A:
 return this.parseIdentifier();
 case ORD_L_K_UC_4B:
 return this.parseIdentifier();
 case ORD_L_X_UC_58:
 return this.parseIdentifier();
 case ORD_L_Q_UC_51:
 return this.parseIdentifier();
 case ORD_L_U_UC_55:
 return this.parseIdentifier();
 case ORD_L_V_UC_56:
 return this.parseIdentifier();
 case ORD_L_W_UC_57:
 return this.parseIdentifier();
 case ORD_L_4_34:
 return this.parseDecimalNumber();
 case ORD_L_5_35:
 return this.parseDecimalNumber();
 case ORD_L_6_36:
 return this.parseDecimalNumber();
 case ORD_L_7_37:
 return this.parseDecimalNumber();
 case ORD_L_8_38:
 return this.parseDecimalNumber();
 case ORD_L_9_39:
 return this.parseDecimalNumber();
 case ORD_PERCENT_25:
 return this.parseCompoundAssignment();
 case ORD_XOR_5E:
 return this.parseCompoundAssignment();
 case ORD_TILDE_7E:
 return this.parseCompoundAssignment();
 case ORD_PS_2028:
 return this.parseNewline();
 case ORD_LS_2029:
 return this.parseNewline();
 case ORD_FF_0C:
 return this.parseOneChar(WHITE);
 case ORD_VTAB_0B:
 return this.parseOneChar(WHITE);
 case ORD_NBSP_A0:
 return this.parseOneChar(WHITE);
 case ORD_BOM_FEFF:
 return this.parseOneChar(WHITE);
 case ORD_BACKSLASH_5C:
 return this.parseBackslash();
 default:
 throw 'Unexpected character in token scanner... fixme! [' + c + ']' + this.syntaxError();
 }
 // TOFIX: still have to validate this first char as a valid ident start
 // return this.parseIdentifier();
 },
 */
